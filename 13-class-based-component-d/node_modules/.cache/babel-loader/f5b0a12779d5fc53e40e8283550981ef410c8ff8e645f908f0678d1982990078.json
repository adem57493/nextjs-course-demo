{"ast":null,"code":"import React from \"react\";\nconst UsersContext = /*#__PURE__*/React.createContext({\n  users: []\n});\nexport default UsersContext;\n/**Context, React uygulamalarında veriyi prop drilling \r\n * yapmadan (yani her bileşen seviyesinde prop geçirerek taşımadan) paylaşmayı sağlar. */\n/**Parametre olarak verilen { users: [] } değeri, context'in varsayılan değeridir. Eğer bu context'e \r\n * bir Provider ile herhangi bir değer sağlanmazsa, bu varsayılan değer kullanılır. */\n\n/**UsersContext.Provider:\r\nAmaç: Context'in verisini tanımlamak ve bu veriyi alt bileşenlere erişilebilir hale getirmek.\r\n\r\nimport UsersContext from './UsersContext';\r\n\r\nconst App = () => {\r\n  const userData = { users: ['Alice', 'Bob', 'Charlie'] };\r\n\r\n  return (\r\n    <UsersContext.Provider value={userData}>\r\n      <MyComponent />\r\n    </UsersContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n/**2. UsersContext.Consumer:\r\nAmaç: Context'in içindeki verilere erişmek.\r\nKullanımı:\r\njsx\r\nKodu kopyala\r\nimport UsersContext from './UsersContext';\r\n\r\nconst MyComponent = () => {\r\n  return (\r\n    <UsersContext.Consumer>\r\n      {(context) => <div>{context.users.join(', ')}</div>}\r\n    </UsersContext.Consumer>\r\n  );\r\n};*/","map":{"version":3,"names":["React","UsersContext","createContext","users"],"sources":["C:/Users/Asus/Desktop/REACT-Maximillan-Schwarzmüller/13-class-based-component-d/src/store/users-context.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst UsersContext=React.createContext({\r\n    users:[]\r\n})\r\n\r\nexport default UsersContext;\r\n/**Context, React uygulamalarında veriyi prop drilling \r\n * yapmadan (yani her bileşen seviyesinde prop geçirerek taşımadan) paylaşmayı sağlar. */\r\n/**Parametre olarak verilen { users: [] } değeri, context'in varsayılan değeridir. Eğer bu context'e \r\n * bir Provider ile herhangi bir değer sağlanmazsa, bu varsayılan değer kullanılır. */\r\n\r\n/**UsersContext.Provider:\r\nAmaç: Context'in verisini tanımlamak ve bu veriyi alt bileşenlere erişilebilir hale getirmek.\r\n\r\nimport UsersContext from './UsersContext';\r\n\r\nconst App = () => {\r\n  const userData = { users: ['Alice', 'Bob', 'Charlie'] };\r\n\r\n  return (\r\n    <UsersContext.Provider value={userData}>\r\n      <MyComponent />\r\n    </UsersContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n/**2. UsersContext.Consumer:\r\nAmaç: Context'in içindeki verilere erişmek.\r\nKullanımı:\r\njsx\r\nKodu kopyala\r\nimport UsersContext from './UsersContext';\r\n\r\nconst MyComponent = () => {\r\n  return (\r\n    <UsersContext.Consumer>\r\n      {(context) => <div>{context.users.join(', ')}</div>}\r\n    </UsersContext.Consumer>\r\n  );\r\n};*/"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,gBAACD,KAAK,CAACE,aAAa,CAAC;EACnCC,KAAK,EAAC;AACV,CAAC,CAAC;AAEF,eAAeF,YAAY;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}